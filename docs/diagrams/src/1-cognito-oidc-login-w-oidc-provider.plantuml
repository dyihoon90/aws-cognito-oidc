@startuml
participant Browser
participant App
participant App_auth_callback_server
participant Cognito
participant OIDC_provider

Browser -> App: User clicks "Login to App" button

Browser->Cognito: Navigate to signin page at https://<your-app>.<your-region>.amazoncognito.com/login
note right
Query Params
1. client_id:
The Cognito client ID
2. response_type:
"code" for authorization code grant, "token" for implicit grant. Must be set at Cognito App client setings
3. scope:
To get back the ID token from Cognito, set "openid". Note this scope is for Cognito.
For OIDC framework, if we include 'openid' in scope, we get back an ID token that has the logged in user's information.
OAuth2 use custom scopes for accessing resources.
4. redirect_uri:
The redirect URL after the entire login flow is done.
Must be one of the Callback URLs defined in the Cognito App client settings
5. state: To record the state before starting login flow. Also provides CSRF protection
end note
Cognito-->Browser: Responds with 200, and a login page to Browser

Browser->Browser: User is presented by Cognito login page with all the OIDC_providers already set up in at Cognito -> Identity provider
Browser->Browser: User clicks on the "Login with OIDC_provider" button

Browser->Cognito: Button navigates the browser to https://<your-app>.<your-region>.amazoncognito.com/authorize page
note right
Query Params
1. identity_provider:
the name of the OIDC_provider set up in Cognito -> Identity providers
2. response_type:
same as in /login
3. scope:
same as in /login. It is for Cognito, not the OIDC_provider
4. redirect_uri:
same as in /login
end note
Cognito-->Browser: Responds with 302, redirecting browser to the ODIC provder's login page

Browser-> OIDC_provider: https://login.salesforce.com/services/oauth2/authorize using Salesforce as an example
note right
Query Params
1. client_id:
the client ID when setting up the OIDC app at the OIDC_provider
(The same one you filled in at Identity providers -> OpenID Connect -> ClientID)
2. redirect_uri:
the redirect URL after the login flow at the OIDC_provider is complete.
Note that this is a different url from the redirect_uri at Cognito.
It will be the Cognito callback URL, 'https://<your-app>.auth.<region>.amazoncognito.com/oauth2/idpresponse'
This URL is for the OIDC provider to pass the authorization code to Cognito server to process.
3. scope:
The scope to ask for user details from the OIDC_provider.
You set this at Cognito console -> Identity providers -> OpenID Connect -> Authorize scope.
Minimally must have 'openid'
4. response_type:
will always be 'code' as Cognito to OIDC_provider use the authorization code grant.
5. state:
State generated by Cognito, for CSRF protection
end note
OIDC_provider-->Browser: Responds with 302, redirecting browser to the OIDC_provider's login page

Browser->OIDC_provider: Navigates to the OIDC_provider login page URL
OIDC_provider-->Browser: Responds with 200, and sends the login page to Browser
Browser->Browser: User performs login at the OIDC_provider login page and click 'Login'

OIDC_provider->Browser: OIDC_provider does necessary login validation of user, on success, sends browser to the Cognito redirect URL above
note right
Recall the redirect URL is https://<your-app>.auth.<your-region>.amazoncognito.com/oauth2/idpresponse
end note

Browser->Cognito: Navigate to https://<your-app>.auth.<your-region>.amazoncognito.com/oauth2/idpresponse
note right
Query Params
1. code:
The code for the authorization code grant flow between Cognito & the OIDC_provider.
Cognito server will take this code, and use an OOB route to exchange it for the tokens from the OIDC_provider.
This flow is not visible to us as Cognito user
2. state:
The state Cognito generated and passed to the OIDC_provider at login.salesforce.com.
Cognito will verify to ensure no CSRF attack has occurred
end note

Cognito->OIDC_provider: Exchange the authorization code for OIDC provider's access token and ID token at OIDC's token endpoint
note right
Exchange is done using out-of-band channel. This means it is done server-to-server without the browser involved.
end note
OIDC_provider-->Cognito: Returns OIDC provider's access token and ID token to Cognito
Cognito->Cognito: Use OIDC provider's tokens to generate access token & ID token for the Cognito app
note right
attributes from OIDC provider's tokens can be mapped to attributes at Cognito at Cognito console -> Attribute mapping
end note


Cognito-->Browser: After generating the tokens, respond with 302, redirect browser to the redirect URL.
note right
This is the initial redirect URL passed to https://<your-app>.<your-region>.amazoncognito.com/login at redirect_uri
end note

alt Implicit grant
Browser->App: Navigates to the redirect URL, the app URL, at https://www.app.com/callback
note right
Query params
1.
access_token: Access token the browser can use to make requests to resources servers that expects Cognito's access token
2.
id_token: ID token identifying the user
3.
token_type: 'Bearer' Not too sure what this is for
4.
expires_in: the expiry of the token
5.
state: state passed to /login
end note


 Authorization code grant
Browser->App_auth_callback_server: Navigates to the redirect URL, the app_auth_callback_server's URL, at https://api.app.com/callback
note right
Query params
1.
code: the authorization code to exchange for tokens using OOB channel at Cognito's /token endpoint
2.
state: state passed to /login

Q: Why navigate to app_auth_callback_server and not app server?

A: Either works, but navigate to app_auth_callback_server means the logic to interface w Cognito can be served using serverless.
In this way, we don't have to implement that logic in the web server at app.com.
Do note that this only works if your resource servers that require the tokens also sits on the api.app.com domain.

end note

App_auth_callback_server->Cognito: Exchange the authorization code for Cognito's access, ID, and refresh tokens at OIDC's token endpoint
note right
Exchange is done using out-of-band channel. This means it is done server-to-server without the browser involved.
end note
Cognito-->App_auth_callback_server: Returns Cognito's access, ID, and refresh tokens to App Auth callback server
end
App_auth_callback_server-->Browser: Responds with 302 to navigate browser back to the page user was at before starting log in. Also set cookie with access, ID, and refresh tokens at domain api.app.com
note right
Q: How does the app knows which page user was at?
A: App usually passes this info to Cognito /login in the 'state' query param
end note


@enduml
